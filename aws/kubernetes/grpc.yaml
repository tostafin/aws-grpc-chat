apiVersion: v1
kind: Namespace
metadata:
  name: grpc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grpc-server
  namespace: grpc
spec:
  selector:
    matchLabels:
      app: grpc-server
  replicas: 1
  template:
    metadata:
      labels:
        app: grpc-server
    spec:
      containers:
      - name: grpc-server
        image: 339712967953.dkr.ecr.us-east-1.amazonaws.com/aws-grpc-server:20.0
        imagePullPolicy: Always
        ports:
        - name: grpc-api
          containerPort: 9000
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: grpc-server
  namespace: grpc
spec:
  ports:
  - port: 9000
    protocol: TCP
    targetPort: 9000
  clusterIP: None
  selector:
    app: grpc-server
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grpc-client
  namespace: grpc
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grpc-client
  template:
    metadata:
      labels:
        app: grpc-client
    spec:
      containers:
        - name: grpc-client
          imagePullPolicy: Always
          image: 339712967953.dkr.ecr.us-east-1.amazonaws.com/aws-grpc-client:20.0
          ports:
            - containerPort: 3000
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: grpc-client
  namespace: grpc
spec:
  ports:
    - port: 3000
      protocol: TCP
      targetPort: 3000
  clusterIP: None
  selector:
    app: grpc-client
---
apiVersion: v1
kind: Service
metadata:
  name: grpc-proxy
  namespace: grpc
#  annotations:
#    service.beta.kubernetes.io/aws-load-balancer-internal: "true"
#    external-dns.alpha.kubernetes.io/hostname: mnessel.pl
  labels:
    k8s-app: grpc-proxy-app
spec:
#  sessionAffinity: None
#  type: LoadBalancer
  ports:
    - name: http
      port: 8080
      targetPort: http
      protocol: TCP
    - name: envoy-admin
      port: 8081
      targetPort: envoy-admin
      protocol: TCP
  selector:
    k8s-app: grpc-proxy-app
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grpc-proxy-app
  labels:
    k8s-app: grpc-proxy-app
  namespace: grpc
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: grpc-proxy-app
  template:
    metadata:
      labels:
        k8s-app: grpc-proxy-app
    spec:
      containers:
        - name: envoy-proxy
          image: 339712967953.dkr.ecr.us-east-1.amazonaws.com/aws-grpc-client-envoy:21.0
          env:
            - name: LISTEN_PORT
              value: "8080"
            - name: SERVICE_DISCOVERY_ADDRESS
              value: grpc-server
            - name: SERVICE_DISCOVERY_PORT
              value: "9000"
          ports:
            - containerPort: 8080
              name: http
            - name: envoy-admin
              containerPort: 8081
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    alb.ingress.kubernetes.io/ssl-redirect: "443"
    alb.ingress.kubernetes.io/backend-protocol-version: "GRPC"
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
  name: grpc-ingress-proxy
  namespace: grpc
spec:
  ingressClassName: alb
  rules:
    - host: "backend.mnessel.pl"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: grpc-proxy
                port:
                  number: 8080
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    alb.ingress.kubernetes.io/ssl-redirect: "443"
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
  name: grpc-ingress
  namespace: grpc
spec:
  ingressClassName: alb
  rules:
    - host: "app.mnessel.pl"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: grpc-client
                port:
                  number: 3000
